#!/bin/bash
set -e

#get/check canvas token
get_canvas_token() {
    if [ -f $SETTINGS_LOCATION ]; then
        settings=$(cat "$SETTINGS_LOCATION")
        settingsArr=(${settings//|/ })
        CANVAS_URL="${settingsArr[0]}"
        CANVAS_TOKEN="${settingsArr[1]}"

        #change option enabled
        if [ "$CHANGE_ENABLED" = true ]; then
            read -p "Enter canvas url (e.g. liverpool.instructure.com): " tmpUrl
            if [ "$tmpUrl" != "" ]; then 
                CANVAS_URL="https://$tmpUrl"
            fi
            read -p "Enter canvas token: " tmpToken
            if [ "$tmpToken" != "" ]; then
                CANVAS_TOKEN="$tmpToken"
            fi
            if [ "$(check_canvas_token "$CANVAS_TOKEN")" = "200" ]; then
                rm -f $SETTINGS_LOCATION
                echo $(echo -ne "$CANVAS_URL|$CANVAS_TOKEN" > $SETTINGS_LOCATION)
                chmod 400 $SETTINGS_LOCATION
            else
                get_canvas_token
            fi
        fi
    else
        read -p "Enter canvas url (e.g. liverpool.instructure.com): " CANVAS_URL
        if [ "$CANVAS_URL" = "" ]; then
            CANVAS_URL="https://liverpool.instructure.com"
        else
            CANVAS_URL="https://$CANVAS_URL"
        fi
        read -p "Enter canvas token: " CANVAS_TOKEN
        echo $(echo -ne "$CANVAS_URL|$CANVAS_TOKEN" > $SETTINGS_LOCATION)
        chmod 400 $SETTINGS_LOCATION
    fi
}

check_canvas_token() {
    curl -so /dev/null -w "%{http_code}" -H "Authorization: Bearer $1" "$CANVAS_URL/api/v1/accounts"
}

setup() {
    if [ "$1" = "-c" ]; then
        CHANGE_ENABLED=true
    fi

    get_canvas_token
    check_status=$(check_canvas_token "$CANVAS_TOKEN")
    while [ "$check_status" != "200" ]; do
        echo
        rm -f $SETTINGS_LOCATION
        get_canvas_token
        check_status=$(check_canvas_token "$CANVAS_TOKEN")
        echo $check_status
    done
}

loader() {
    str="Loading"
    echo -ne "$str\r"
    while true; do
        str="$str."
        if [ $str = "Loading....." ]; then
            echo -ne "           \r"
            str="Loading"
        fi
        echo -ne "$str\r"
        sleep .5
    done
}

startLoader() {
    loader &
    LOADER_PID=$!
    trap "kill -9 $LOADER_PID" `seq 0 15`
}

arrayContainsRes=false
arrayContains() {
    arrayContainsRes=false
    srch=$1
    shift
    myArr=("$@")
    for i in ${myArr[@]}; do
        if [ "$i" = "$srch" ]; then
            arrayContainsRes=true
        fi
    done
}

CANVAS_URL=""
CANVAS_TOKEN=""
SETTINGS_LOCATION=~/.config/canvas_settings
CHANGE_ENABLED=false

subcommand=$1
if [ "$subcommand" = "null" ] || [ "$subcommand" = "" ]; then
    subcommand="h"
else
    shift
fi
case "$subcommand" in
    h|help|"-h"|"--help" )
        echo
        echo -e "Usage:\n\tcanvas <operation> -h,Display help for specific operation.\n\tcanvas <operation> [option],Execute one of the operations below." | column -t -s ','
        echo -e "Operations:\n\th help,Display this help message.\n\tu upcoming,Display any assignments which are due in the future.\n\tg grades,Display submitted assignments and grades.\n\ts settings,Change your canvas url or token." | column -t -s ','
        echo -e "\nCanvas Token:\nYou must generate a canvas token to use this script. On Canvas, go to your Account Settings and look under Approved Integrations. Create a new access token with the name \"Canvas CLI\" and with no expiration date. Copy the token value, run any Canvas CLI command and paste the token when requested."
        exit 0
        ;;
    u|upcoming )
        compact=false
        blankMode=false
        onlyFavCourses=false
        includeLocked=false
        includeSubmitted=false
        filterCourses=false
        courseList=()
        includeLinks=false

        while getopts ":hcbflswm:" opt; do
            case $opt in
                h ) echo -e "\nUsage:\n\tcanvas u [option]\n\tcanvas upcoming [option]"
                    echo -e "Options:\n\t-h,Display this help message.\n\t-c,Display the output in compact style.\n\t-b,Enable blank mode so the output doesn't use colours.\n\t-f,Display only favourited courses.\n\t-l,Display assignments which haven't yet unlocked.\n\t-s,Display submitted assignments.\n\t-w,Include web links to the assignment at the end of each row. Might negatively impact appearance.\n\t-m [code],Display only specific courses. Courses should be specified as numeric codes separated by a comma." | column -t -s ','
                    echo -e "\nCanvas Token:\nYou must generate a canvas token to use this script. On Canvas, go to your Account Settings and look under Approved Integrations. Create a new access token with the name \"Canvas CLI\" and with no expiration date. Copy the token value, run any Canvas CLI command and paste the token when requested."
                    exit 0
                    ;;
                c ) compact=true;;
                b ) blankMode=true;;
                f ) onlyFavCourses=true;;
                l ) includeLocked=true;;
                s ) includeSubmitted=true;;
                w ) includeLinks=true;;
                m ) case $OPTARG in
                        : ) echo "Invalid Option: -m requires an argument" 1>&2
                            exit 1
                            ;;
                        "" ) ;;
                        * ) filterCourses=true
                            while IFS=',' read -ra courses; do
                                for i in "${courses[@]}"; do
                                    if [ "$i" != "" ]; then
                                        courseList+=( $( echo "$i" | sed 's@^[^0-9]*\([0-9]\+\).*@\1@' ) )
                                    fi
                                done
                            done <<< $(echo "$OPTARG" | sed 's/[^0-9,]*//g')
                            if [ ${#courseList[@]} = "0" ]; then
                                echo "Invalid course(s) '$OPTARG': see -h for more info" 1>&2
                                exit 1
                            fi
                            ;;
                    esac
                    ;;
                \? ) echo "Invalid Option: -$OPTARG" 1>&2
                     exit 1
                     ;;
            esac
        done

        setup

        #define vars for assignments
        RED='\033[0;91m'
        GREEN='\033[0;92m'
        ORANGE='\033[0;93m'
        NC='\033[0m'
        BOLDDIM='\033[1;2m'
        BLINK='\033[5m'
        if [ "$blankMode" = true ]; then
            RED=''
            GREEN=''
            ORANGE=''
            NC=''
            BOLDDIM=''
            BLINK=''
        fi
        COURSE_URL="$CANVAS_URL/api/v1/courses"
        if [ "$onlyFavCourses" = true ]; then
            COURSE_URL="$CANVAS_URL/api/v1/users/self/favorites/courses"
        fi
        today=$(date +"%s")
        twoDays=$(date -d "+2days" +"%s")
        oneWeek=$(date -d "+7days" +"%s")
        colorsArray=( "" )
        titlesArray=( "Title" )
        deadlinesArray=( "Deadline" )
        coursesArray=( "Course" )
        unlocksAtArray=( "Unlocks At" )
        linksArray=( "" )

        startLoader

        #for each course
        for course in $(curl -s -H "Authorization: Bearer $CANVAS_TOKEN" "$COURSE_URL" | jq -r '.[] | @base64'); do

            _jqCourse() {
                echo ${course} | base64 --decode | jq -r ${1}
            }

            course_code="$(echo $(_jqCourse '.course_code') | sed 's@^[^0-9]*\([0-9]\+\).*@\1@')"
            arrayContains "$course_code" "${courseList[@]}"
            if [ "$filterCourses" = false ] || [ "$arrayContainsRes" = true ]; then
            
                for row in $(curl -s -H "Authorization: Bearer $CANVAS_TOKEN" "$CANVAS_URL/api/v1/courses/$(_jqCourse '.id')/assignments?order_by=due_at&include[]=submission" | jq -r '.[] | @base64'); do

                    _jqRow() {
                        echo ${row} | base64 --decode | jq -r ${1}
                    }

                    unlock_at=$(_jqRow '.unlock_at')
                    due_at=$(_jqRow '.due_at')
                    lock_at=$(_jqRow '.lock_at')

                    #need to check if unlock_at is null or in the past
                    if [ "$includeLocked" = true ] || [ "$unlock_at" = "null" ] || [ "$(date -d $unlock_at +"%s")" -le $today ]; then
                        #need to check if due_at is in the future
                        if [ "$includeSubmitted" = true ] || { [ "$due_at" != "null" ] && [ "$(date -d $due_at +"%s")" -ge $today ]; }; then
                            #need to check if lock_at is null or in the future
                            if [ "$includeSubmitted" = true ] || { [ "$lock_at" = "null" ] || [ "$(date -d $lock_at +"%s")" -ge $today ]; }; then
                                invalidDate=false
                                if [ "$due_at" != "null" ]; then
                                    deadline=$(date -d $due_at +"%s")
                                else
                                    invalidDate=true
                                    deadline=$(date -d "01/01/2000 00:00" +"%s")
                                fi
                                if [ "$lock_at" != "null" ] && [ $(date -d $lock_at +"%s") -le $deadline ]; then
                                    deadline=$(date -d $lock_at +"%s")
                                fi
                                color=${NC}
                                if [ $(_jqRow '.submission' | jq -r '.workflow_state') != "unsubmitted" ]; then
                                    if [ "$includeSubmitted" = false ]; then
                                        continue
                                    fi
                                    color=$GREEN
                                elif [ "$invalidDate" = false ]; then
                                    if [ "$deadline" -le "$today" ]; then
                                        color=$RED$BLINK
                                    elif [ "$deadline" -le "$twoDays" ]; then
                                        color=$RED
                                    elif [ "$deadline" -le "$oneWeek" ]; then
                                        color=$ORANGE
                                    fi
                                fi
                                colorsArray+=( "$color" )
                                title=$(_jqRow '.name')
                                if [ ${#title} -gt 30 ]; then
                                    title="${title:0:27}..."
                                fi
                                titlesArray+=( "$title" )
                                if [ "$invalidDate" = true ]; then
                                    deadlinesArray+=( "" )
                                else
                                    deadlinesArray+=( "$(date -d $due_at +"%a %d %b %Y %H:%M")" )
                                fi
                                coursesArray+=( "$course_code" )
                                linksArray+=( "$(_jqRow '.html_url')" )
                                if [ "$includeLocked" = true ]; then
                                    if [ "$unlock_at" = "null" ] || [ "$(date -d $unlock_at +"%s")" -le $today ]; then
                                        unlocksAtArray+=( "" )
                                    else
                                        unlocksAtArray+=( "$(date -d $unlock_at +"%a %d %b %Y %H:%M")" )
                                    fi
                                fi
                            fi
                        fi
                    fi


                done
            fi
        done

        longestCourse=0
        longestTitle=0
        for ((i=0; i<${#titlesArray[@]}; i++)); do
            if [ "$compact" = true ] && [ ${#coursesArray[i]} -gt $longestCourse ]; then
                longestCourse=${#coursesArray[i]}
            fi
            if [ ${#titlesArray[i]} -gt $longestTitle ]; then
                longestTitle=${#titlesArray[i]}
            fi
        done

        #output
        echo -ne "           \r"
        lastCourse=""
        if [ "$compact" = true ]; then
            printf "\n$BOLDDIM%-${longestCourse}s  %-${longestTitle}s  %-21s" ${coursesArray[0]} ${titlesArray[0]} ${deadlinesArray[0]}
            if [ "$includeLocked" = true ]; then
                printf "  %-21s" "${unlocksAtArray[0]}"
            fi
            printf "$NC"
            for ((i=1; i<${#titlesArray[@]}; i++)); do
                if [ "$lastCourse" != "${coursesArray[i]}" ]; then
                    printf "\n"
                    lastCourse="${coursesArray[i]}"
                fi
                link="%-${longestTitle}s"
                if [ "$includeLinks" = false ]; then
                    link="\e]8;;${linksArray[i]}\a$link\e]8;;\a"
                fi
                printf "%-${longestCourse}s  ${colorsArray[i]}$link$NC  %-21s" "${coursesArray[i]}" "${titlesArray[i]}" "${deadlinesArray[i]}"
                if [ "$includeLocked" = true ]; then
                    printf "  %-21s" "${unlocksAtArray[i]}"
                fi
                if [ "$includeLinks" = true ]; then
                    printf "  %s" "${linksArray[i]}"
                fi
                printf "\n"
            done
        else
            for ((i=1; i<${#titlesArray[@]}; i++)); do
                if [ "$lastCourse" != "${coursesArray[i]}" ]; then
                    printf "\n$BOLDDIM${coursesArray[i]}$NC\n"
                    lastCourse="${coursesArray[i]}"
                fi
                link="%-${longestTitle}s"
                if [ "$includeLinks" = false ]; then
                    link="\e]8;;${linksArray[i]}\a$link\e]8;;\a"
                fi
                printf "${colorsArray[i]}$link$NC  %-21s" "${titlesArray[i]}" "${deadlinesArray[i]}"
                if [ "$includeLocked" = true ]; then
                    printf "  %-21s" "${unlocksAtArray[i]}"
                fi
                if [ "$includeLinks" = true ]; then
                    printf "  %s" "${linksArray[i]}"
                fi
                printf "\n"
            done
        fi
        ;;
    g|grades )
        command -v bc >/dev/null || (echo "Package bc must be installed." && exit 1)

        compact=false
        blankMode=false
        onlyFavCourses=false
        filterCourses=false
        courseList=()
        includeLinks=false

        while getopts ":hcbfwm:" opt; do
            case $opt in
                h ) echo -e "\nUsage:\n\tcanvas g [option]\n\tcanvas grades [option]"
                    echo -e "\nOptions:\n\t-h,Display this help message.\n\t-c,Display the output in compact style.\n\t-b,Enable blank mode so the output doesn't use colours.\n\t-f,Display only favourited courses.\n\t-w,Include web links to the assignment at the end of each row. Might negatively impact appearance.\n\t-m [code],Display only specific courses. Courses should be specified as numeric codes separated by a comma." | column -t -s ','
                    echo -e "\nCanvas Token:\nYou must generate a canvas token to use this script. On Canvas, go to your Account Settings and look under Approved Integrations. Create a new access token with the name \"Canvas CLI\" and with no expiration date. Copy the token value, run any Canvas CLI command and paste the token when requested."
                    exit 0
                    ;;
                c ) compact=true;;
                b ) blankMode=true;;
                f ) onlyFavCourses=true;;
                w ) includeLinks=true;;
                m ) case $OPTARG in
                        : ) echo "Invalid Option: -m requires an argument" 1>&2
                            exit 1
                            ;;
                        "" ) ;;
                        * ) filterCourses=true
                            while IFS=',' read -ra courses; do
                                for i in "${courses[@]}"; do
                                    if [ "$i" != "" ]; then
                                        courseList+=( $( echo "$i" | sed 's@^[^0-9]*\([0-9]\+\).*@\1@' ) )
                                    fi
                                done
                            done <<< $(echo "$OPTARG" | sed 's/[^0-9,]*//g')
                            if [ ${#courseList[@]} = "0" ]; then
                                echo "Invalid course(s) '$OPTARG': see -h for more info" 1>&2
                                exit 1
                            fi
                            ;;
                    esac
                    ;;
                \? ) echo "Invalid Option: -$OPTARG" 1>&2
                     exit 1
                     ;;
            esac
        done

        setup

        #define vars for assignments
        RED='\033[0;91m'
        GREEN='\033[0;92m'
        ORANGE='\033[0;93m'
        NC='\033[0m'
        BOLDDIM='\033[1;2m'
        BLINK='\033[5m'
        if [ "$blankMode" = true ]; then
            RED=''
            GREEN=''
            ORANGE=''
            NC=''
            BOLDDIM=''
            BLINK=''
        fi
        today=$(date +"%s")
        twoDays=$(date -d "+2days" +"%s")
        oneWeek=$(date -d "+7days" +"%s")
        titlesArray=( "Title" )
        linksArray=( "" )
        coursesArray=( "Course" )
        scoresArray=( "Score" )
        outOfArray=( "Out Of" )
        gradesArray=( "Grade" )
        COURSE_URL="$CANVAS_URL/api/v1/courses"
        if [ "$onlyFavCourses" = true ]; then
            COURSE_URL="$CANVAS_URL/api/v1/users/self/favorites/courses"
        fi

        startLoader

        #for each course
        for course in $(curl -s -H "Authorization: Bearer $CANVAS_TOKEN" "$COURSE_URL" | jq -r '.[] | @base64'); do

            _jqCourse() {
                echo ${course} | base64 --decode | jq -r ${1}
            }

            course_code="$(echo $(_jqCourse '.course_code' | sed 's@^[^0-9]*\([0-9]\+\).*@\1@') )"
            arrayContains "$course_code" "${courseList[@]}"
            if [ "$filterCourses" = false ] || [ "$arrayContainsRes" = true ]; then
            
                for row in $(curl -s -H "Authorization: Bearer $CANVAS_TOKEN" "$CANVAS_URL/api/v1/courses/$(_jqCourse '.id')/students/submissions?order=graded_at&include[]=assignment" | jq -r '.[] | @base64'); do

                    _jqRow() {
                        echo ${row} | base64 --decode | jq -r ${1}
                    }

                    if [ $(_jqRow '.workflow_state') != "unsubmitted" ]; then
                        title="$(_jqRow '.assignment' | jq -r '.name')"
                        if [ ${#title} -gt 30 ]; then
                            title="${title:0:27}..."
                        fi
                        titlesArray+=( "$title" )
                        coursesArray+=( "$course_code" )
                        linksArray+=( "$(_jqRow '.assignment' | jq -r '.html_url')" )
                        score="$(_jqRow '.score')"
                        grade=""
                        if [ "$score" = "null" ]; then
                            score="-"
                            grade="-"
                        fi
                        scoresArray+=( "$score" )
                        outOf="$(_jqRow '.assignment' | jq -r '.points_possible')"
                        if [ "$outOf" = "null" ]; then
                            outOf="-"
                            grade="-"
                        elif [ "$outOf" = "0" ]; then
                            grade="-"
                        fi
                        outOfArray+=( "$outOf" )
                        if [ "$grade" = "" ]; then
                            grade=$(echo "scale=2; ($score*100)/$outOf" | bc)
                        fi
                        gradesArray+=( $grade )
                    fi
                done
            fi
        done

        #output
        longestCourse=0
        longestTitle=0
        longestOutOf=0
        longestScore=0
        longestGrade=0
        for ((i=0; i<${#titlesArray[@]}; i++)); do
            if [ ${#coursesArray[i]} -gt $longestCourse ]; then
                longestCourse=${#coursesArray[i]}
            fi
            if [ ${#titlesArray[i]} -gt $longestTitle ]; then
                longestTitle=${#titlesArray[i]}
            fi
            if [ ${#scoresArray[i]} -gt $longestScore ]; then
                longestScore=${#scoresArray[i]}
            fi
            if [ ${#outOfArray[i]} -gt $longestOutOf ]; then
                longestOutOf=${#outOfArray[i]}
            fi
            if [ ${#gradesArray[i]} -gt $longestGrade ]; then
                longestGrade=${#gradesArray[i]}
            fi
        done

        echo -ne "           \r"
        lastCourse=""
        if [ "$compact" = true ]; then
            printf "\n$BOLDDIM%-${longestCourse}s  %-${longestTitle}s  %-${longestScore}s  %-${longestOutOf}s  %-${longestGrade}s$NC" "${coursesArray[0]}" "${titlesArray[0]}" "${scoresArray[0]}" "${outOfArray[0]}" "${gradesArray[0]}"
            for ((i=1; i<${#titlesArray[@]}; i++)); do
                if [ "$lastCourse" != "${coursesArray[i]}" ]; then
                    printf "\n"
                    lastCourse="${coursesArray[i]}"
                fi
                color=$NC
                if [ "$blankMode" = false ] && [ "${gradesArray[i]}" != "-" ]; then
                    if [ $(echo "${gradesArray[i]} == 100" | bc -l) ]; then
                        color=$GREEN
                    elif [ $(echo "${gradesArray[i]} >= 80" | bc -l) ]; then
                        color=$ORANGE
                    elif [ $(echo "${gradesArray[i]} < 40" | bc -l) ]; then
                        color=$RED
                    fi
                fi
                link="%-${longestTitle}s"
                if [ "$includeLinks" = false ]; then
                    link="\e]8;;${linksArray[i]}\a$link\e]8;;\a"
                fi
                printf "%-${longestCourse}s  $color$link$NC  %-${longestScore}s  %-${longestOutOf}s  %-${longestGrade}s$NC" "${coursesArray[i]}" "${titlesArray[i]}" "${scoresArray[i]}" "${outOfArray[i]}" "${gradesArray[i]%.00}"
                if [ "$includeLinks" = true ]; then
                    printf "  %s" "${linksArray[i]}"
                fi
                printf "\n"
            done
        else
            for ((i=1; i<${#titlesArray[@]}; i++)); do
                if [ "$lastCourse" != "${coursesArray[i]}" ]; then
                    printf "\n$BOLDDIM${coursesArray[i]}$NC\n"
                    lastCourse="${coursesArray[i]}"
                fi
                color=$NC
                if [ "$blankMode" = false ] && [ "${gradesArray[i]}" != "-" ]; then
                    if [ $(echo "${gradesArray[i]} == 100" | bc -l) ]; then
                        color=$GREEN
                    elif [ $(echo "${gradesArray[i]} >= 80" | bc -l) ]; then
                        color=$ORANGE
                    elif [ $(echo "${gradesArray[i]} < 40" | bc -l) ]; then
                        color=$RED
                    fi
                fi
                link="%-${longestTitle}s"
                if [ "$includeLinks" = false ]; then
                    link="\e]8;;${linksArray[i]}\a$link\e]8;;\a"
                fi
                printf "$color$link$NC  %-${longestScore}s  %-${longestOutOf}s  %-${longestGrade}s" "${titlesArray[i]}" "${scoresArray[i]}" "${outOfArray[i]}" "${gradesArray[i]%.00}"
                if [ "$includeLinks" = true ]; then
                    printf "  %s" "${linksArray[i]}"
                fi
                printf "\n"
            done
        fi

        ;;
    s|settings )
        setup -c
        ;;
    * )
        echo "Canvas CLI: Unknown command. See canvas h for help."
        exit 0
        ;;
esac
